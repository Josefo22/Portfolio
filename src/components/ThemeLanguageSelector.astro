---
// Selector de tema e idioma simplificado
---

<div class="fixed right-4 top-20 z-40 flex flex-col space-y-2">
  <!-- Tema -->
  <button 
    id="theme-btn"
    onclick="toggleTheme()"
    class="flex items-center justify-center w-10 h-10 text-gray-500 bg-white dark:bg-gray-800 rounded-full shadow-lg hover:text-emerald-500 dark:hover:text-emerald-400 focus:outline-none transition-colors duration-300"
  >
    <!-- Sol (modo claro) -->
    <svg id="light-icon" class="w-5 h-5 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <circle cx="12" cy="12" r="5"></circle>
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </svg>
    
    <!-- Luna (modo oscuro) -->
    <svg id="dark-icon" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
    </svg>
  </button>
  
  <!-- Selector de idioma (un solo botón) -->
  <button
    id="language-btn" 
    onclick="toggleLanguage()"
    class="flex items-center justify-center w-10 h-10 text-gray-500 bg-white dark:bg-gray-800 rounded-full shadow-lg hover:text-emerald-500 dark:hover:text-emerald-400 focus:outline-none transition-colors duration-300"
  >
    <span id="current-lang" class="text-sm font-medium">ES</span>
  </button>
</div>

<style>
  /* Asegurar que no haya scrollbars adicionales */
  .fixed {
    overflow: visible !important;
  }
</style>

<script is:inline>
  // Funciones globales para cambiar tema e idioma
  function toggleTheme() {
    const isDark = document.documentElement.classList.contains('dark');
    const darkIcon = document.getElementById('dark-icon');
    const lightIcon = document.getElementById('light-icon');
    
    if (isDark) {
      document.documentElement.classList.remove('dark');
      darkIcon.classList.remove('hidden');
      lightIcon.classList.add('hidden');
      localStorage.setItem('color-theme', 'light');
    } else {
      document.documentElement.classList.add('dark');
      darkIcon.classList.add('hidden');
      lightIcon.classList.remove('hidden');
      localStorage.setItem('color-theme', 'dark');
    }
  }
  
  function toggleLanguage() {
    // Obtener el idioma actual y determinar el nuevo
    const currentLanguage = localStorage.getItem('language') || 'es';
    const newLanguage = currentLanguage === 'es' ? 'en' : 'es';
    
    console.log('Cambiando idioma de', currentLanguage, 'a', newLanguage);
    
    // Guardar el nuevo idioma en localStorage
    localStorage.setItem('language', newLanguage);
    
    // Actualizar directamente el texto del botón
    const langButton = document.getElementById('current-lang');
    if (langButton) {
      langButton.textContent = newLanguage.toUpperCase();
    }
    
    // Llamar a la función global de cambio de idioma si existe
    if (typeof window.changeLanguage === 'function') {
      window.changeLanguage(newLanguage);
    } else {
      console.error('La función changeLanguage no está disponible');
    }
    
    // Forzar la actualización de la página para asegurar que todos los elementos se actualicen
    location.reload();
  }
  
  // Función para aplicar idioma a elementos específicos que podrían no actualizarse automáticamente
  function applyLanguageToElements(lang) {
    // Actualizar placeholders
    document.querySelectorAll('[data-i18n-placeholder]').forEach(function(element) {
      const key = element.getAttribute('data-i18n-placeholder');
      if (key && window.translations && window.translations[lang] && window.translations[lang][key]) {
        element.setAttribute('placeholder', window.translations[lang][key]);
      }
    });
    
    // Asegurar que los botones y elementos de formulario estén traducidos
    document.querySelectorAll('button, input[type="submit"]').forEach(function(element) {
      const key = element.getAttribute('data-i18n');
      if (key && window.translations && window.translations[lang] && window.translations[lang][key]) {
        if (element.tagName === 'INPUT') {
          element.value = window.translations[lang][key];
        } else {
          const textNode = Array.from(element.childNodes).find(node => node.nodeType === Node.TEXT_NODE);
          if (textNode) {
            textNode.nodeValue = window.translations[lang][key];
          }
        }
      }
    });
  }
  
  // Inicializar al cargar la página
  document.addEventListener('DOMContentLoaded', function() {
    // Establecer el texto del botón de idioma según el valor guardado
    const storedLang = localStorage.getItem('language') || 'es';
    const langButton = document.getElementById('current-lang');
    
    if (langButton) {
      langButton.textContent = storedLang.toUpperCase();
      console.log('Botón de idioma inicializado a:', storedLang.toUpperCase());
    }
    
    // Inicializar iconos según el tema actual
    const initialIsDark = document.documentElement.classList.contains('dark');
    const darkIcon = document.getElementById('dark-icon');
    const lightIcon = document.getElementById('light-icon');
    
    if (initialIsDark) {
      darkIcon.classList.add('hidden');
      lightIcon.classList.remove('hidden');
    } else {
      darkIcon.classList.remove('hidden');
      lightIcon.classList.add('hidden');
    }
  });
</script>